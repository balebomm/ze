// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
constexpr Graph_Location::Graph_Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coordinates_()
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Graph_LocationDefaultTypeInternal {
  constexpr Graph_LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Graph_LocationDefaultTypeInternal() {}
  union {
    Graph_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Graph_LocationDefaultTypeInternal _Graph_Location_default_instance_;
constexpr Graph_Point::Graph_Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , node_id_(0){}
struct Graph_PointDefaultTypeInternal {
  constexpr Graph_PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Graph_PointDefaultTypeInternal() {}
  union {
    Graph_Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Graph_PointDefaultTypeInternal _Graph_Point_default_instance_;
constexpr Graph_RouteRequest::Graph_RouteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(nullptr)
  , to_(nullptr){}
struct Graph_RouteRequestDefaultTypeInternal {
  constexpr Graph_RouteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Graph_RouteRequestDefaultTypeInternal() {}
  union {
    Graph_RouteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Graph_RouteRequestDefaultTypeInternal _Graph_RouteRequest_default_instance_;
constexpr Graph_RouteResponse::Graph_RouteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shortest_routes_()
  , traverse_foward_routes_()
  , traverse_backward_routes_()
  , total_distance_(int64_t{0}){}
struct Graph_RouteResponseDefaultTypeInternal {
  constexpr Graph_RouteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Graph_RouteResponseDefaultTypeInternal() {}
  union {
    Graph_RouteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Graph_RouteResponseDefaultTypeInternal _Graph_RouteResponse_default_instance_;
constexpr Graph_ConfigRequest::Graph_ConfigRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : algorithm_type_(0)

  , total_distance_(false)
  , shortest_routes_(false)
  , traverse_forward_routes_(false)
  , traverse_backward_routes_(false){}
struct Graph_ConfigRequestDefaultTypeInternal {
  constexpr Graph_ConfigRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Graph_ConfigRequestDefaultTypeInternal() {}
  union {
    Graph_ConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Graph_ConfigRequestDefaultTypeInternal _Graph_ConfigRequest_default_instance_;
constexpr Graph_EmptyResponse::Graph_EmptyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Graph_EmptyResponseDefaultTypeInternal {
  constexpr Graph_EmptyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Graph_EmptyResponseDefaultTypeInternal() {}
  union {
    Graph_EmptyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Graph_EmptyResponseDefaultTypeInternal _Graph_EmptyResponse_default_instance_;
}  // namespace proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_graph_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_graph_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_graph_2eproto = nullptr;

const uint32_t TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Graph_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Graph_Location, type_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_Location, coordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Graph_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Graph_Point, node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_Point, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Graph_RouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Graph_RouteRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_RouteRequest, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Graph_RouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Graph_RouteResponse, total_distance_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_RouteResponse, shortest_routes_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_RouteResponse, traverse_foward_routes_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_RouteResponse, traverse_backward_routes_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_ConfigRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_ConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Graph_ConfigRequest, algorithm_type_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_ConfigRequest, total_distance_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_ConfigRequest, shortest_routes_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_ConfigRequest, traverse_forward_routes_),
  PROTOBUF_FIELD_OFFSET(::proto::Graph_ConfigRequest, traverse_backward_routes_),
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Graph_EmptyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::Graph_Location)},
  { 8, -1, -1, sizeof(::proto::Graph_Point)},
  { 16, -1, -1, sizeof(::proto::Graph_RouteRequest)},
  { 24, -1, -1, sizeof(::proto::Graph_RouteResponse)},
  { 34, 45, -1, sizeof(::proto::Graph_ConfigRequest)},
  { 50, -1, -1, sizeof(::proto::Graph_EmptyResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Graph_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Graph_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Graph_RouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Graph_RouteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Graph_ConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Graph_EmptyResponse_default_instance_),
};

const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013graph.proto\022\005proto\"3\n\016Graph_Location\022\014"
  "\n\004type\030\001 \001(\t\022\023\n\013coordinates\030\002 \003(\002\"G\n\013Gra"
  "ph_Point\022\017\n\007node_id\030\001 \001(\005\022\'\n\010location\030\002 "
  "\001(\0132\025.proto.Graph_Location\"V\n\022Graph_Rout"
  "eRequest\022 \n\004from\030\001 \001(\0132\022.proto.Graph_Poi"
  "nt\022\036\n\002to\030\002 \001(\0132\022.proto.Graph_Point\"\315\001\n\023G"
  "raph_RouteResponse\022\026\n\016total_distance\030\001 \001"
  "(\003\022.\n\017shortest_routes\030\002 \003(\0132\025.proto.Grap"
  "h_Location\0225\n\026traverse_foward_routes\030\003 \003"
  "(\0132\025.proto.Graph_Location\0227\n\030traverse_ba"
  "ckward_routes\030\004 \003(\0132\025.proto.Graph_Locati"
  "on\"\274\003\n\023Graph_ConfigRequest\022@\n\016algorithm_"
  "type\030\001 \001(\0162(.proto.Graph_ConfigRequest.A"
  "lgorithmType\022\033\n\016total_distance\030\002 \001(\010H\000\210\001"
  "\001\022\034\n\017shortest_routes\030\003 \001(\010H\001\210\001\001\022$\n\027trave"
  "rse_forward_routes\030\004 \001(\010H\002\210\001\001\022%\n\030travers"
  "e_backward_routes\030\005 \001(\010H\003\210\001\001\"{\n\rAlgorith"
  "mType\022\014\n\010Dijkstra\020\000\022\031\n\025BidirectionalDijk"
  "stra\020\001\022\t\n\005AStar\020\002\022\026\n\022BidirectionalAStar\020"
  "\003\022\036\n\032BidirectionalAStarLandmark\020\004B\021\n\017_to"
  "tal_distanceB\022\n\020_shortest_routesB\032\n\030_tra"
  "verse_forward_routesB\033\n\031_traverse_backwa"
  "rd_routes\"\025\n\023Graph_EmptyResponse2\233\001\n\rGra"
  "ph_Service\022C\n\010GetRoute\022\031.proto.Graph_Rou"
  "teRequest\032\032.proto.Graph_RouteResponse\"\000\022"
  "E\n\tSetConfig\022\032.proto.Graph_ConfigRequest"
  "\032\032.proto.Graph_EmptyResponse\"\000B\003\370\001\001b\006pro"
  "to3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_graph_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto = {
  false, false, 1083, descriptor_table_protodef_graph_2eproto, "graph.proto", 
  &descriptor_table_graph_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_graph_2eproto::offsets,
  file_level_metadata_graph_2eproto, file_level_enum_descriptors_graph_2eproto, file_level_service_descriptors_graph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_graph_2eproto_getter() {
  return &descriptor_table_graph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_graph_2eproto(&descriptor_table_graph_2eproto);
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Graph_ConfigRequest_AlgorithmType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[0];
}
bool Graph_ConfigRequest_AlgorithmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Graph_ConfigRequest_AlgorithmType Graph_ConfigRequest::Dijkstra;
constexpr Graph_ConfigRequest_AlgorithmType Graph_ConfigRequest::BidirectionalDijkstra;
constexpr Graph_ConfigRequest_AlgorithmType Graph_ConfigRequest::AStar;
constexpr Graph_ConfigRequest_AlgorithmType Graph_ConfigRequest::BidirectionalAStar;
constexpr Graph_ConfigRequest_AlgorithmType Graph_ConfigRequest::BidirectionalAStarLandmark;
constexpr Graph_ConfigRequest_AlgorithmType Graph_ConfigRequest::AlgorithmType_MIN;
constexpr Graph_ConfigRequest_AlgorithmType Graph_ConfigRequest::AlgorithmType_MAX;
constexpr int Graph_ConfigRequest::AlgorithmType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Graph_Location::_Internal {
 public:
};

Graph_Location::Graph_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  coordinates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Graph_Location)
}
Graph_Location::Graph_Location(const Graph_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coordinates_(from.coordinates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Graph_Location)
}

inline void Graph_Location::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Graph_Location::~Graph_Location() {
  // @@protoc_insertion_point(destructor:proto.Graph_Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Graph_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Graph_Location::ArenaDtor(void* object) {
  Graph_Location* _this = reinterpret_cast< Graph_Location* >(object);
  (void)_this;
}
void Graph_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Graph_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Graph_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Graph_Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coordinates_.Clear();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.Graph_Location.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float coordinates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_coordinates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_coordinates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph_Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Graph_Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.Graph_Location.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated float coordinates = 2;
  if (this->_internal_coordinates_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_coordinates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Graph_Location)
  return target;
}

size_t Graph_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Graph_Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float coordinates = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coordinates_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph_Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Graph_Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph_Location::GetClassData() const { return &_class_data_; }

void Graph_Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Graph_Location *>(to)->MergeFrom(
      static_cast<const Graph_Location &>(from));
}


void Graph_Location::MergeFrom(const Graph_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Graph_Location)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  coordinates_.MergeFrom(from.coordinates_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph_Location::CopyFrom(const Graph_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Graph_Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph_Location::IsInitialized() const {
  return true;
}

void Graph_Location::InternalSwap(Graph_Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  coordinates_.InternalSwap(&other->coordinates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph_Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[0]);
}

// ===================================================================

class Graph_Point::_Internal {
 public:
  static const ::proto::Graph_Location& location(const Graph_Point* msg);
};

const ::proto::Graph_Location&
Graph_Point::_Internal::location(const Graph_Point* msg) {
  return *msg->location_;
}
Graph_Point::Graph_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Graph_Point)
}
Graph_Point::Graph_Point(const Graph_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::proto::Graph_Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:proto.Graph_Point)
}

inline void Graph_Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&location_)) + sizeof(node_id_));
}

Graph_Point::~Graph_Point() {
  // @@protoc_insertion_point(destructor:proto.Graph_Point)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Graph_Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void Graph_Point::ArenaDtor(void* object) {
  Graph_Point* _this = reinterpret_cast< Graph_Point* >(object);
  (void)_this;
}
void Graph_Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Graph_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Graph_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Graph_Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  node_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph_Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Graph_Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph_Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Graph_Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // .proto.Graph_Location location = 2;
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Graph_Point)
  return target;
}

size_t Graph_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Graph_Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Graph_Location location = 2;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph_Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Graph_Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph_Point::GetClassData() const { return &_class_data_; }

void Graph_Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Graph_Point *>(to)->MergeFrom(
      static_cast<const Graph_Point &>(from));
}


void Graph_Point::MergeFrom(const Graph_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Graph_Point)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _internal_mutable_location()->::proto::Graph_Location::MergeFrom(from._internal_location());
  }
  if (from._internal_node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph_Point::CopyFrom(const Graph_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Graph_Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph_Point::IsInitialized() const {
  return true;
}

void Graph_Point::InternalSwap(Graph_Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Graph_Point, node_id_)
      + sizeof(Graph_Point::node_id_)
      - PROTOBUF_FIELD_OFFSET(Graph_Point, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph_Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[1]);
}

// ===================================================================

class Graph_RouteRequest::_Internal {
 public:
  static const ::proto::Graph_Point& from(const Graph_RouteRequest* msg);
  static const ::proto::Graph_Point& to(const Graph_RouteRequest* msg);
};

const ::proto::Graph_Point&
Graph_RouteRequest::_Internal::from(const Graph_RouteRequest* msg) {
  return *msg->from_;
}
const ::proto::Graph_Point&
Graph_RouteRequest::_Internal::to(const Graph_RouteRequest* msg) {
  return *msg->to_;
}
Graph_RouteRequest::Graph_RouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Graph_RouteRequest)
}
Graph_RouteRequest::Graph_RouteRequest(const Graph_RouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from()) {
    from_ = new ::proto::Graph_Point(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::proto::Graph_Point(*from.to_);
  } else {
    to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.Graph_RouteRequest)
}

inline void Graph_RouteRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

Graph_RouteRequest::~Graph_RouteRequest() {
  // @@protoc_insertion_point(destructor:proto.Graph_RouteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Graph_RouteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void Graph_RouteRequest::ArenaDtor(void* object) {
  Graph_RouteRequest* _this = reinterpret_cast< Graph_RouteRequest* >(object);
  (void)_this;
}
void Graph_RouteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Graph_RouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Graph_RouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Graph_RouteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph_RouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Graph_Point from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Graph_Point to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph_RouteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Graph_RouteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Graph_Point from = 1;
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::from(this), target, stream);
  }

  // .proto.Graph_Point to = 2;
  if (this->_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::to(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Graph_RouteRequest)
  return target;
}

size_t Graph_RouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Graph_RouteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Graph_Point from = 1;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .proto.Graph_Point to = 2;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph_RouteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Graph_RouteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph_RouteRequest::GetClassData() const { return &_class_data_; }

void Graph_RouteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Graph_RouteRequest *>(to)->MergeFrom(
      static_cast<const Graph_RouteRequest &>(from));
}


void Graph_RouteRequest::MergeFrom(const Graph_RouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Graph_RouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_from()) {
    _internal_mutable_from()->::proto::Graph_Point::MergeFrom(from._internal_from());
  }
  if (from._internal_has_to()) {
    _internal_mutable_to()->::proto::Graph_Point::MergeFrom(from._internal_to());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph_RouteRequest::CopyFrom(const Graph_RouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Graph_RouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph_RouteRequest::IsInitialized() const {
  return true;
}

void Graph_RouteRequest::InternalSwap(Graph_RouteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Graph_RouteRequest, to_)
      + sizeof(Graph_RouteRequest::to_)
      - PROTOBUF_FIELD_OFFSET(Graph_RouteRequest, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph_RouteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[2]);
}

// ===================================================================

class Graph_RouteResponse::_Internal {
 public:
};

Graph_RouteResponse::Graph_RouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shortest_routes_(arena),
  traverse_foward_routes_(arena),
  traverse_backward_routes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Graph_RouteResponse)
}
Graph_RouteResponse::Graph_RouteResponse(const Graph_RouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shortest_routes_(from.shortest_routes_),
      traverse_foward_routes_(from.traverse_foward_routes_),
      traverse_backward_routes_(from.traverse_backward_routes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_distance_ = from.total_distance_;
  // @@protoc_insertion_point(copy_constructor:proto.Graph_RouteResponse)
}

inline void Graph_RouteResponse::SharedCtor() {
total_distance_ = int64_t{0};
}

Graph_RouteResponse::~Graph_RouteResponse() {
  // @@protoc_insertion_point(destructor:proto.Graph_RouteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Graph_RouteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Graph_RouteResponse::ArenaDtor(void* object) {
  Graph_RouteResponse* _this = reinterpret_cast< Graph_RouteResponse* >(object);
  (void)_this;
}
void Graph_RouteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Graph_RouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Graph_RouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Graph_RouteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shortest_routes_.Clear();
  traverse_foward_routes_.Clear();
  traverse_backward_routes_.Clear();
  total_distance_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph_RouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 total_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          total_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Graph_Location shortest_routes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shortest_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Graph_Location traverse_foward_routes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traverse_foward_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Graph_Location traverse_backward_routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traverse_backward_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph_RouteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Graph_RouteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total_distance = 1;
  if (this->_internal_total_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_total_distance(), target);
  }

  // repeated .proto.Graph_Location shortest_routes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shortest_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shortest_routes(i), target, stream);
  }

  // repeated .proto.Graph_Location traverse_foward_routes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traverse_foward_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_traverse_foward_routes(i), target, stream);
  }

  // repeated .proto.Graph_Location traverse_backward_routes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traverse_backward_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_traverse_backward_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Graph_RouteResponse)
  return target;
}

size_t Graph_RouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Graph_RouteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Graph_Location shortest_routes = 2;
  total_size += 1UL * this->_internal_shortest_routes_size();
  for (const auto& msg : this->shortest_routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.Graph_Location traverse_foward_routes = 3;
  total_size += 1UL * this->_internal_traverse_foward_routes_size();
  for (const auto& msg : this->traverse_foward_routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.Graph_Location traverse_backward_routes = 4;
  total_size += 1UL * this->_internal_traverse_backward_routes_size();
  for (const auto& msg : this->traverse_backward_routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 total_distance = 1;
  if (this->_internal_total_distance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_total_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph_RouteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Graph_RouteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph_RouteResponse::GetClassData() const { return &_class_data_; }

void Graph_RouteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Graph_RouteResponse *>(to)->MergeFrom(
      static_cast<const Graph_RouteResponse &>(from));
}


void Graph_RouteResponse::MergeFrom(const Graph_RouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Graph_RouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shortest_routes_.MergeFrom(from.shortest_routes_);
  traverse_foward_routes_.MergeFrom(from.traverse_foward_routes_);
  traverse_backward_routes_.MergeFrom(from.traverse_backward_routes_);
  if (from._internal_total_distance() != 0) {
    _internal_set_total_distance(from._internal_total_distance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph_RouteResponse::CopyFrom(const Graph_RouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Graph_RouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph_RouteResponse::IsInitialized() const {
  return true;
}

void Graph_RouteResponse::InternalSwap(Graph_RouteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shortest_routes_.InternalSwap(&other->shortest_routes_);
  traverse_foward_routes_.InternalSwap(&other->traverse_foward_routes_);
  traverse_backward_routes_.InternalSwap(&other->traverse_backward_routes_);
  swap(total_distance_, other->total_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph_RouteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[3]);
}

// ===================================================================

class Graph_ConfigRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Graph_ConfigRequest>()._has_bits_);
  static void set_has_total_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shortest_routes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_traverse_forward_routes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_traverse_backward_routes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Graph_ConfigRequest::Graph_ConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Graph_ConfigRequest)
}
Graph_ConfigRequest::Graph_ConfigRequest(const Graph_ConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&algorithm_type_, &from.algorithm_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&traverse_backward_routes_) -
    reinterpret_cast<char*>(&algorithm_type_)) + sizeof(traverse_backward_routes_));
  // @@protoc_insertion_point(copy_constructor:proto.Graph_ConfigRequest)
}

inline void Graph_ConfigRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&algorithm_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&traverse_backward_routes_) -
    reinterpret_cast<char*>(&algorithm_type_)) + sizeof(traverse_backward_routes_));
}

Graph_ConfigRequest::~Graph_ConfigRequest() {
  // @@protoc_insertion_point(destructor:proto.Graph_ConfigRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Graph_ConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Graph_ConfigRequest::ArenaDtor(void* object) {
  Graph_ConfigRequest* _this = reinterpret_cast< Graph_ConfigRequest* >(object);
  (void)_this;
}
void Graph_ConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Graph_ConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Graph_ConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Graph_ConfigRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algorithm_type_ = 0;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&total_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&traverse_backward_routes_) -
        reinterpret_cast<char*>(&total_distance_)) + sizeof(traverse_backward_routes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph_ConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Graph_ConfigRequest.AlgorithmType algorithm_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_algorithm_type(static_cast<::proto::Graph_ConfigRequest_AlgorithmType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bool total_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_distance(&has_bits);
          total_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shortest_routes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shortest_routes(&has_bits);
          shortest_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool traverse_forward_routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_traverse_forward_routes(&has_bits);
          traverse_forward_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool traverse_backward_routes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_traverse_backward_routes(&has_bits);
          traverse_backward_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph_ConfigRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Graph_ConfigRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Graph_ConfigRequest.AlgorithmType algorithm_type = 1;
  if (this->_internal_algorithm_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_algorithm_type(), target);
  }

  // optional bool total_distance = 2;
  if (_internal_has_total_distance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_total_distance(), target);
  }

  // optional bool shortest_routes = 3;
  if (_internal_has_shortest_routes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shortest_routes(), target);
  }

  // optional bool traverse_forward_routes = 4;
  if (_internal_has_traverse_forward_routes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_traverse_forward_routes(), target);
  }

  // optional bool traverse_backward_routes = 5;
  if (_internal_has_traverse_backward_routes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_traverse_backward_routes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Graph_ConfigRequest)
  return target;
}

size_t Graph_ConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Graph_ConfigRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Graph_ConfigRequest.AlgorithmType algorithm_type = 1;
  if (this->_internal_algorithm_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm_type());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool total_distance = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool shortest_routes = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool traverse_forward_routes = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool traverse_backward_routes = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph_ConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Graph_ConfigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph_ConfigRequest::GetClassData() const { return &_class_data_; }

void Graph_ConfigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Graph_ConfigRequest *>(to)->MergeFrom(
      static_cast<const Graph_ConfigRequest &>(from));
}


void Graph_ConfigRequest::MergeFrom(const Graph_ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Graph_ConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_algorithm_type() != 0) {
    _internal_set_algorithm_type(from._internal_algorithm_type());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      total_distance_ = from.total_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      shortest_routes_ = from.shortest_routes_;
    }
    if (cached_has_bits & 0x00000004u) {
      traverse_forward_routes_ = from.traverse_forward_routes_;
    }
    if (cached_has_bits & 0x00000008u) {
      traverse_backward_routes_ = from.traverse_backward_routes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph_ConfigRequest::CopyFrom(const Graph_ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Graph_ConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph_ConfigRequest::IsInitialized() const {
  return true;
}

void Graph_ConfigRequest::InternalSwap(Graph_ConfigRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Graph_ConfigRequest, traverse_backward_routes_)
      + sizeof(Graph_ConfigRequest::traverse_backward_routes_)
      - PROTOBUF_FIELD_OFFSET(Graph_ConfigRequest, algorithm_type_)>(
          reinterpret_cast<char*>(&algorithm_type_),
          reinterpret_cast<char*>(&other->algorithm_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph_ConfigRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[4]);
}

// ===================================================================

class Graph_EmptyResponse::_Internal {
 public:
};

Graph_EmptyResponse::Graph_EmptyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.Graph_EmptyResponse)
}
Graph_EmptyResponse::Graph_EmptyResponse(const Graph_EmptyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.Graph_EmptyResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph_EmptyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph_EmptyResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Graph_EmptyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::Graph_Location* Arena::CreateMaybeMessage< ::proto::Graph_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Graph_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Graph_Point* Arena::CreateMaybeMessage< ::proto::Graph_Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Graph_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Graph_RouteRequest* Arena::CreateMaybeMessage< ::proto::Graph_RouteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Graph_RouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Graph_RouteResponse* Arena::CreateMaybeMessage< ::proto::Graph_RouteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Graph_RouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Graph_ConfigRequest* Arena::CreateMaybeMessage< ::proto::Graph_ConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Graph_ConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Graph_EmptyResponse* Arena::CreateMaybeMessage< ::proto::Graph_EmptyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Graph_EmptyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
