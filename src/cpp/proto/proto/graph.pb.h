// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace proto {
class Graph_Location;
struct Graph_LocationDefaultTypeInternal;
extern Graph_LocationDefaultTypeInternal _Graph_Location_default_instance_;
class Graph_Point;
struct Graph_PointDefaultTypeInternal;
extern Graph_PointDefaultTypeInternal _Graph_Point_default_instance_;
class Graph_RouteRequest;
struct Graph_RouteRequestDefaultTypeInternal;
extern Graph_RouteRequestDefaultTypeInternal _Graph_RouteRequest_default_instance_;
class Graph_RouteResponse;
struct Graph_RouteResponseDefaultTypeInternal;
extern Graph_RouteResponseDefaultTypeInternal _Graph_RouteResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Graph_Location* Arena::CreateMaybeMessage<::proto::Graph_Location>(Arena*);
template<> ::proto::Graph_Point* Arena::CreateMaybeMessage<::proto::Graph_Point>(Arena*);
template<> ::proto::Graph_RouteRequest* Arena::CreateMaybeMessage<::proto::Graph_RouteRequest>(Arena*);
template<> ::proto::Graph_RouteResponse* Arena::CreateMaybeMessage<::proto::Graph_RouteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Graph_Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Graph_Location) */ {
 public:
  inline Graph_Location() : Graph_Location(nullptr) {}
  ~Graph_Location() override;
  explicit constexpr Graph_Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph_Location(const Graph_Location& from);
  Graph_Location(Graph_Location&& from) noexcept
    : Graph_Location() {
    *this = ::std::move(from);
  }

  inline Graph_Location& operator=(const Graph_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph_Location& operator=(Graph_Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Graph_Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph_Location* internal_default_instance() {
    return reinterpret_cast<const Graph_Location*>(
               &_Graph_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Graph_Location& a, Graph_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph_Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Graph_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Graph_Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Graph_Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Graph_Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph_Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Graph_Location";
  }
  protected:
  explicit Graph_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated float coordinates = 2;
  int coordinates_size() const;
  private:
  int _internal_coordinates_size() const;
  public:
  void clear_coordinates();
  private:
  float _internal_coordinates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_coordinates() const;
  void _internal_add_coordinates(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_coordinates();
  public:
  float coordinates(int index) const;
  void set_coordinates(int index, float value);
  void add_coordinates(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      coordinates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_coordinates();

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:proto.Graph_Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > coordinates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Graph_Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Graph_Point) */ {
 public:
  inline Graph_Point() : Graph_Point(nullptr) {}
  ~Graph_Point() override;
  explicit constexpr Graph_Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph_Point(const Graph_Point& from);
  Graph_Point(Graph_Point&& from) noexcept
    : Graph_Point() {
    *this = ::std::move(from);
  }

  inline Graph_Point& operator=(const Graph_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph_Point& operator=(Graph_Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Graph_Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph_Point* internal_default_instance() {
    return reinterpret_cast<const Graph_Point*>(
               &_Graph_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Graph_Point& a, Graph_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph_Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Graph_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Graph_Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Graph_Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Graph_Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph_Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Graph_Point";
  }
  protected:
  explicit Graph_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // .proto.Graph_Location location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::proto::Graph_Location& location() const;
  PROTOBUF_NODISCARD ::proto::Graph_Location* release_location();
  ::proto::Graph_Location* mutable_location();
  void set_allocated_location(::proto::Graph_Location* location);
  private:
  const ::proto::Graph_Location& _internal_location() const;
  ::proto::Graph_Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::proto::Graph_Location* location);
  ::proto::Graph_Location* unsafe_arena_release_location();

  // int32 node_id = 1;
  void clear_node_id();
  int32_t node_id() const;
  void set_node_id(int32_t value);
  private:
  int32_t _internal_node_id() const;
  void _internal_set_node_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Graph_Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Graph_Location* location_;
  int32_t node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Graph_RouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Graph_RouteRequest) */ {
 public:
  inline Graph_RouteRequest() : Graph_RouteRequest(nullptr) {}
  ~Graph_RouteRequest() override;
  explicit constexpr Graph_RouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph_RouteRequest(const Graph_RouteRequest& from);
  Graph_RouteRequest(Graph_RouteRequest&& from) noexcept
    : Graph_RouteRequest() {
    *this = ::std::move(from);
  }

  inline Graph_RouteRequest& operator=(const Graph_RouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph_RouteRequest& operator=(Graph_RouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Graph_RouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph_RouteRequest* internal_default_instance() {
    return reinterpret_cast<const Graph_RouteRequest*>(
               &_Graph_RouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Graph_RouteRequest& a, Graph_RouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph_RouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph_RouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Graph_RouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Graph_RouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Graph_RouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Graph_RouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph_RouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Graph_RouteRequest";
  }
  protected:
  explicit Graph_RouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // .proto.Graph_Point from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::proto::Graph_Point& from() const;
  PROTOBUF_NODISCARD ::proto::Graph_Point* release_from();
  ::proto::Graph_Point* mutable_from();
  void set_allocated_from(::proto::Graph_Point* from);
  private:
  const ::proto::Graph_Point& _internal_from() const;
  ::proto::Graph_Point* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::proto::Graph_Point* from);
  ::proto::Graph_Point* unsafe_arena_release_from();

  // .proto.Graph_Point to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::proto::Graph_Point& to() const;
  PROTOBUF_NODISCARD ::proto::Graph_Point* release_to();
  ::proto::Graph_Point* mutable_to();
  void set_allocated_to(::proto::Graph_Point* to);
  private:
  const ::proto::Graph_Point& _internal_to() const;
  ::proto::Graph_Point* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::proto::Graph_Point* to);
  ::proto::Graph_Point* unsafe_arena_release_to();

  // @@protoc_insertion_point(class_scope:proto.Graph_RouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Graph_Point* from_;
  ::proto::Graph_Point* to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Graph_RouteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Graph_RouteResponse) */ {
 public:
  inline Graph_RouteResponse() : Graph_RouteResponse(nullptr) {}
  ~Graph_RouteResponse() override;
  explicit constexpr Graph_RouteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph_RouteResponse(const Graph_RouteResponse& from);
  Graph_RouteResponse(Graph_RouteResponse&& from) noexcept
    : Graph_RouteResponse() {
    *this = ::std::move(from);
  }

  inline Graph_RouteResponse& operator=(const Graph_RouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph_RouteResponse& operator=(Graph_RouteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Graph_RouteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph_RouteResponse* internal_default_instance() {
    return reinterpret_cast<const Graph_RouteResponse*>(
               &_Graph_RouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Graph_RouteResponse& a, Graph_RouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph_RouteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph_RouteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Graph_RouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Graph_RouteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Graph_RouteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Graph_RouteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph_RouteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Graph_RouteResponse";
  }
  protected:
  explicit Graph_RouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 2,
    kTraverseFowardRoutesFieldNumber = 3,
    kTraverseBackwardRoutesFieldNumber = 4,
    kDistanceFieldNumber = 1,
  };
  // repeated .proto.Graph_Location routes = 2;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::proto::Graph_Location* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >*
      mutable_routes();
  private:
  const ::proto::Graph_Location& _internal_routes(int index) const;
  ::proto::Graph_Location* _internal_add_routes();
  public:
  const ::proto::Graph_Location& routes(int index) const;
  ::proto::Graph_Location* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >&
      routes() const;

  // repeated .proto.Graph_Location traverse_foward_routes = 3;
  int traverse_foward_routes_size() const;
  private:
  int _internal_traverse_foward_routes_size() const;
  public:
  void clear_traverse_foward_routes();
  ::proto::Graph_Location* mutable_traverse_foward_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >*
      mutable_traverse_foward_routes();
  private:
  const ::proto::Graph_Location& _internal_traverse_foward_routes(int index) const;
  ::proto::Graph_Location* _internal_add_traverse_foward_routes();
  public:
  const ::proto::Graph_Location& traverse_foward_routes(int index) const;
  ::proto::Graph_Location* add_traverse_foward_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >&
      traverse_foward_routes() const;

  // repeated .proto.Graph_Location traverse_backward_routes = 4;
  int traverse_backward_routes_size() const;
  private:
  int _internal_traverse_backward_routes_size() const;
  public:
  void clear_traverse_backward_routes();
  ::proto::Graph_Location* mutable_traverse_backward_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >*
      mutable_traverse_backward_routes();
  private:
  const ::proto::Graph_Location& _internal_traverse_backward_routes(int index) const;
  ::proto::Graph_Location* _internal_add_traverse_backward_routes();
  public:
  const ::proto::Graph_Location& traverse_backward_routes(int index) const;
  ::proto::Graph_Location* add_traverse_backward_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >&
      traverse_backward_routes() const;

  // int64 distance = 1;
  void clear_distance();
  int64_t distance() const;
  void set_distance(int64_t value);
  private:
  int64_t _internal_distance() const;
  void _internal_set_distance(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Graph_RouteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location > routes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location > traverse_foward_routes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location > traverse_backward_routes_;
  int64_t distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Graph_Location

// string type = 1;
inline void Graph_Location::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Graph_Location::type() const {
  // @@protoc_insertion_point(field_get:proto.Graph_Location.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Graph_Location::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Graph_Location.type)
}
inline std::string* Graph_Location::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:proto.Graph_Location.type)
  return _s;
}
inline const std::string& Graph_Location::_internal_type() const {
  return type_.Get();
}
inline void Graph_Location::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Graph_Location::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Graph_Location::release_type() {
  // @@protoc_insertion_point(field_release:proto.Graph_Location.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Graph_Location::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Graph_Location.type)
}

// repeated float coordinates = 2;
inline int Graph_Location::_internal_coordinates_size() const {
  return coordinates_.size();
}
inline int Graph_Location::coordinates_size() const {
  return _internal_coordinates_size();
}
inline void Graph_Location::clear_coordinates() {
  coordinates_.Clear();
}
inline float Graph_Location::_internal_coordinates(int index) const {
  return coordinates_.Get(index);
}
inline float Graph_Location::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:proto.Graph_Location.coordinates)
  return _internal_coordinates(index);
}
inline void Graph_Location::set_coordinates(int index, float value) {
  coordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Graph_Location.coordinates)
}
inline void Graph_Location::_internal_add_coordinates(float value) {
  coordinates_.Add(value);
}
inline void Graph_Location::add_coordinates(float value) {
  _internal_add_coordinates(value);
  // @@protoc_insertion_point(field_add:proto.Graph_Location.coordinates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Graph_Location::_internal_coordinates() const {
  return coordinates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Graph_Location::coordinates() const {
  // @@protoc_insertion_point(field_list:proto.Graph_Location.coordinates)
  return _internal_coordinates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Graph_Location::_internal_mutable_coordinates() {
  return &coordinates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Graph_Location::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:proto.Graph_Location.coordinates)
  return _internal_mutable_coordinates();
}

// -------------------------------------------------------------------

// Graph_Point

// int32 node_id = 1;
inline void Graph_Point::clear_node_id() {
  node_id_ = 0;
}
inline int32_t Graph_Point::_internal_node_id() const {
  return node_id_;
}
inline int32_t Graph_Point::node_id() const {
  // @@protoc_insertion_point(field_get:proto.Graph_Point.node_id)
  return _internal_node_id();
}
inline void Graph_Point::_internal_set_node_id(int32_t value) {
  
  node_id_ = value;
}
inline void Graph_Point::set_node_id(int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:proto.Graph_Point.node_id)
}

// .proto.Graph_Location location = 2;
inline bool Graph_Point::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Graph_Point::has_location() const {
  return _internal_has_location();
}
inline void Graph_Point::clear_location() {
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::proto::Graph_Location& Graph_Point::_internal_location() const {
  const ::proto::Graph_Location* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Graph_Location&>(
      ::proto::_Graph_Location_default_instance_);
}
inline const ::proto::Graph_Location& Graph_Point::location() const {
  // @@protoc_insertion_point(field_get:proto.Graph_Point.location)
  return _internal_location();
}
inline void Graph_Point::unsafe_arena_set_allocated_location(
    ::proto::Graph_Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Graph_Point.location)
}
inline ::proto::Graph_Location* Graph_Point::release_location() {
  
  ::proto::Graph_Location* temp = location_;
  location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Graph_Location* Graph_Point::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:proto.Graph_Point.location)
  
  ::proto::Graph_Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::proto::Graph_Location* Graph_Point::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Graph_Location>(GetArenaForAllocation());
    location_ = p;
  }
  return location_;
}
inline ::proto::Graph_Location* Graph_Point::mutable_location() {
  ::proto::Graph_Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:proto.Graph_Point.location)
  return _msg;
}
inline void Graph_Point::set_allocated_location(::proto::Graph_Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::Graph_Location>::GetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:proto.Graph_Point.location)
}

// -------------------------------------------------------------------

// Graph_RouteRequest

// .proto.Graph_Point from = 1;
inline bool Graph_RouteRequest::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool Graph_RouteRequest::has_from() const {
  return _internal_has_from();
}
inline void Graph_RouteRequest::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
inline const ::proto::Graph_Point& Graph_RouteRequest::_internal_from() const {
  const ::proto::Graph_Point* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Graph_Point&>(
      ::proto::_Graph_Point_default_instance_);
}
inline const ::proto::Graph_Point& Graph_RouteRequest::from() const {
  // @@protoc_insertion_point(field_get:proto.Graph_RouteRequest.from)
  return _internal_from();
}
inline void Graph_RouteRequest::unsafe_arena_set_allocated_from(
    ::proto::Graph_Point* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Graph_RouteRequest.from)
}
inline ::proto::Graph_Point* Graph_RouteRequest::release_from() {
  
  ::proto::Graph_Point* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Graph_Point* Graph_RouteRequest::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:proto.Graph_RouteRequest.from)
  
  ::proto::Graph_Point* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::proto::Graph_Point* Graph_RouteRequest::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Graph_Point>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::proto::Graph_Point* Graph_RouteRequest::mutable_from() {
  ::proto::Graph_Point* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:proto.Graph_RouteRequest.from)
  return _msg;
}
inline void Graph_RouteRequest::set_allocated_from(::proto::Graph_Point* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::Graph_Point>::GetOwningArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:proto.Graph_RouteRequest.from)
}

// .proto.Graph_Point to = 2;
inline bool Graph_RouteRequest::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool Graph_RouteRequest::has_to() const {
  return _internal_has_to();
}
inline void Graph_RouteRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
inline const ::proto::Graph_Point& Graph_RouteRequest::_internal_to() const {
  const ::proto::Graph_Point* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Graph_Point&>(
      ::proto::_Graph_Point_default_instance_);
}
inline const ::proto::Graph_Point& Graph_RouteRequest::to() const {
  // @@protoc_insertion_point(field_get:proto.Graph_RouteRequest.to)
  return _internal_to();
}
inline void Graph_RouteRequest::unsafe_arena_set_allocated_to(
    ::proto::Graph_Point* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Graph_RouteRequest.to)
}
inline ::proto::Graph_Point* Graph_RouteRequest::release_to() {
  
  ::proto::Graph_Point* temp = to_;
  to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Graph_Point* Graph_RouteRequest::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:proto.Graph_RouteRequest.to)
  
  ::proto::Graph_Point* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::proto::Graph_Point* Graph_RouteRequest::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Graph_Point>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::proto::Graph_Point* Graph_RouteRequest::mutable_to() {
  ::proto::Graph_Point* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:proto.Graph_RouteRequest.to)
  return _msg;
}
inline void Graph_RouteRequest::set_allocated_to(::proto::Graph_Point* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::Graph_Point>::GetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:proto.Graph_RouteRequest.to)
}

// -------------------------------------------------------------------

// Graph_RouteResponse

// int64 distance = 1;
inline void Graph_RouteResponse::clear_distance() {
  distance_ = int64_t{0};
}
inline int64_t Graph_RouteResponse::_internal_distance() const {
  return distance_;
}
inline int64_t Graph_RouteResponse::distance() const {
  // @@protoc_insertion_point(field_get:proto.Graph_RouteResponse.distance)
  return _internal_distance();
}
inline void Graph_RouteResponse::_internal_set_distance(int64_t value) {
  
  distance_ = value;
}
inline void Graph_RouteResponse::set_distance(int64_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:proto.Graph_RouteResponse.distance)
}

// repeated .proto.Graph_Location routes = 2;
inline int Graph_RouteResponse::_internal_routes_size() const {
  return routes_.size();
}
inline int Graph_RouteResponse::routes_size() const {
  return _internal_routes_size();
}
inline void Graph_RouteResponse::clear_routes() {
  routes_.Clear();
}
inline ::proto::Graph_Location* Graph_RouteResponse::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Graph_RouteResponse.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >*
Graph_RouteResponse::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:proto.Graph_RouteResponse.routes)
  return &routes_;
}
inline const ::proto::Graph_Location& Graph_RouteResponse::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::proto::Graph_Location& Graph_RouteResponse::routes(int index) const {
  // @@protoc_insertion_point(field_get:proto.Graph_RouteResponse.routes)
  return _internal_routes(index);
}
inline ::proto::Graph_Location* Graph_RouteResponse::_internal_add_routes() {
  return routes_.Add();
}
inline ::proto::Graph_Location* Graph_RouteResponse::add_routes() {
  ::proto::Graph_Location* _add = _internal_add_routes();
  // @@protoc_insertion_point(field_add:proto.Graph_RouteResponse.routes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >&
Graph_RouteResponse::routes() const {
  // @@protoc_insertion_point(field_list:proto.Graph_RouteResponse.routes)
  return routes_;
}

// repeated .proto.Graph_Location traverse_foward_routes = 3;
inline int Graph_RouteResponse::_internal_traverse_foward_routes_size() const {
  return traverse_foward_routes_.size();
}
inline int Graph_RouteResponse::traverse_foward_routes_size() const {
  return _internal_traverse_foward_routes_size();
}
inline void Graph_RouteResponse::clear_traverse_foward_routes() {
  traverse_foward_routes_.Clear();
}
inline ::proto::Graph_Location* Graph_RouteResponse::mutable_traverse_foward_routes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Graph_RouteResponse.traverse_foward_routes)
  return traverse_foward_routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >*
Graph_RouteResponse::mutable_traverse_foward_routes() {
  // @@protoc_insertion_point(field_mutable_list:proto.Graph_RouteResponse.traverse_foward_routes)
  return &traverse_foward_routes_;
}
inline const ::proto::Graph_Location& Graph_RouteResponse::_internal_traverse_foward_routes(int index) const {
  return traverse_foward_routes_.Get(index);
}
inline const ::proto::Graph_Location& Graph_RouteResponse::traverse_foward_routes(int index) const {
  // @@protoc_insertion_point(field_get:proto.Graph_RouteResponse.traverse_foward_routes)
  return _internal_traverse_foward_routes(index);
}
inline ::proto::Graph_Location* Graph_RouteResponse::_internal_add_traverse_foward_routes() {
  return traverse_foward_routes_.Add();
}
inline ::proto::Graph_Location* Graph_RouteResponse::add_traverse_foward_routes() {
  ::proto::Graph_Location* _add = _internal_add_traverse_foward_routes();
  // @@protoc_insertion_point(field_add:proto.Graph_RouteResponse.traverse_foward_routes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >&
Graph_RouteResponse::traverse_foward_routes() const {
  // @@protoc_insertion_point(field_list:proto.Graph_RouteResponse.traverse_foward_routes)
  return traverse_foward_routes_;
}

// repeated .proto.Graph_Location traverse_backward_routes = 4;
inline int Graph_RouteResponse::_internal_traverse_backward_routes_size() const {
  return traverse_backward_routes_.size();
}
inline int Graph_RouteResponse::traverse_backward_routes_size() const {
  return _internal_traverse_backward_routes_size();
}
inline void Graph_RouteResponse::clear_traverse_backward_routes() {
  traverse_backward_routes_.Clear();
}
inline ::proto::Graph_Location* Graph_RouteResponse::mutable_traverse_backward_routes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Graph_RouteResponse.traverse_backward_routes)
  return traverse_backward_routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >*
Graph_RouteResponse::mutable_traverse_backward_routes() {
  // @@protoc_insertion_point(field_mutable_list:proto.Graph_RouteResponse.traverse_backward_routes)
  return &traverse_backward_routes_;
}
inline const ::proto::Graph_Location& Graph_RouteResponse::_internal_traverse_backward_routes(int index) const {
  return traverse_backward_routes_.Get(index);
}
inline const ::proto::Graph_Location& Graph_RouteResponse::traverse_backward_routes(int index) const {
  // @@protoc_insertion_point(field_get:proto.Graph_RouteResponse.traverse_backward_routes)
  return _internal_traverse_backward_routes(index);
}
inline ::proto::Graph_Location* Graph_RouteResponse::_internal_add_traverse_backward_routes() {
  return traverse_backward_routes_.Add();
}
inline ::proto::Graph_Location* Graph_RouteResponse::add_traverse_backward_routes() {
  ::proto::Graph_Location* _add = _internal_add_traverse_backward_routes();
  // @@protoc_insertion_point(field_add:proto.Graph_RouteResponse.traverse_backward_routes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Graph_Location >&
Graph_RouteResponse::traverse_backward_routes() const {
  // @@protoc_insertion_point(field_list:proto.Graph_RouteResponse.traverse_backward_routes)
  return traverse_backward_routes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
