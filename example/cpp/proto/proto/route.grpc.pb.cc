// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: route.proto

#include "route.pb.h"
#include "route.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {

static const char* Route_method_names[] = {
  "/proto.Route/GetFeature",
  "/proto.Route/ListFeatures",
  "/proto.Route/RecordRoute",
  "/proto.Route/RouteChat",
};

std::unique_ptr< Route::Stub> Route::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Route::Stub> stub(new Route::Stub(channel, options));
  return stub;
}

Route::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetFeature_(Route_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFeatures_(Route_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RecordRoute_(Route_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_RouteChat_(Route_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Route::Stub::GetFeature(::grpc::ClientContext* context, const ::proto::Point& request, ::proto::Feature* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Point, ::proto::Feature, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFeature_, context, request, response);
}

void Route::Stub::async::GetFeature(::grpc::ClientContext* context, const ::proto::Point* request, ::proto::Feature* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Point, ::proto::Feature, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFeature_, context, request, response, std::move(f));
}

void Route::Stub::async::GetFeature(::grpc::ClientContext* context, const ::proto::Point* request, ::proto::Feature* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFeature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Feature>* Route::Stub::PrepareAsyncGetFeatureRaw(::grpc::ClientContext* context, const ::proto::Point& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Feature, ::proto::Point, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFeature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Feature>* Route::Stub::AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::proto::Point& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFeatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::proto::Feature>* Route::Stub::ListFeaturesRaw(::grpc::ClientContext* context, const ::proto::Rectangle& request) {
  return ::grpc::internal::ClientReaderFactory< ::proto::Feature>::Create(channel_.get(), rpcmethod_ListFeatures_, context, request);
}

void Route::Stub::async::ListFeatures(::grpc::ClientContext* context, const ::proto::Rectangle* request, ::grpc::ClientReadReactor< ::proto::Feature>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::proto::Feature>::Create(stub_->channel_.get(), stub_->rpcmethod_ListFeatures_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::proto::Feature>* Route::Stub::AsyncListFeaturesRaw(::grpc::ClientContext* context, const ::proto::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::Feature>::Create(channel_.get(), cq, rpcmethod_ListFeatures_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::proto::Feature>* Route::Stub::PrepareAsyncListFeaturesRaw(::grpc::ClientContext* context, const ::proto::Rectangle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::Feature>::Create(channel_.get(), cq, rpcmethod_ListFeatures_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::proto::Point>* Route::Stub::RecordRouteRaw(::grpc::ClientContext* context, ::proto::RouteSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::proto::Point>::Create(channel_.get(), rpcmethod_RecordRoute_, context, response);
}

void Route::Stub::async::RecordRoute(::grpc::ClientContext* context, ::proto::RouteSummary* response, ::grpc::ClientWriteReactor< ::proto::Point>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::proto::Point>::Create(stub_->channel_.get(), stub_->rpcmethod_RecordRoute_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::proto::Point>* Route::Stub::AsyncRecordRouteRaw(::grpc::ClientContext* context, ::proto::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::proto::Point>::Create(channel_.get(), cq, rpcmethod_RecordRoute_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::proto::Point>* Route::Stub::PrepareAsyncRecordRouteRaw(::grpc::ClientContext* context, ::proto::RouteSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::proto::Point>::Create(channel_.get(), cq, rpcmethod_RecordRoute_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::proto::RouteNote, ::proto::RouteNote>* Route::Stub::RouteChatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::proto::RouteNote, ::proto::RouteNote>::Create(channel_.get(), rpcmethod_RouteChat_, context);
}

void Route::Stub::async::RouteChat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::RouteNote,::proto::RouteNote>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::proto::RouteNote,::proto::RouteNote>::Create(stub_->channel_.get(), stub_->rpcmethod_RouteChat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::proto::RouteNote, ::proto::RouteNote>* Route::Stub::AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::proto::RouteNote, ::proto::RouteNote>::Create(channel_.get(), cq, rpcmethod_RouteChat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::proto::RouteNote, ::proto::RouteNote>* Route::Stub::PrepareAsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::proto::RouteNote, ::proto::RouteNote>::Create(channel_.get(), cq, rpcmethod_RouteChat_, context, false, nullptr);
}

Route::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Route_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Route::Service, ::proto::Point, ::proto::Feature, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Route::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Point* req,
             ::proto::Feature* resp) {
               return service->GetFeature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Route_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Route::Service, ::proto::Rectangle, ::proto::Feature>(
          [](Route::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Rectangle* req,
             ::grpc::ServerWriter<::proto::Feature>* writer) {
               return service->ListFeatures(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Route_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Route::Service, ::proto::Point, ::proto::RouteSummary>(
          [](Route::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::proto::Point>* reader,
             ::proto::RouteSummary* resp) {
               return service->RecordRoute(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Route_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Route::Service, ::proto::RouteNote, ::proto::RouteNote>(
          [](Route::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::proto::RouteNote,
             ::proto::RouteNote>* stream) {
               return service->RouteChat(ctx, stream);
             }, this)));
}

Route::Service::~Service() {
}

::grpc::Status Route::Service::GetFeature(::grpc::ServerContext* context, const ::proto::Point* request, ::proto::Feature* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Route::Service::ListFeatures(::grpc::ServerContext* context, const ::proto::Rectangle* request, ::grpc::ServerWriter< ::proto::Feature>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Route::Service::RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::proto::Point>* reader, ::proto::RouteSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Route::Service::RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::RouteNote, ::proto::RouteNote>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

