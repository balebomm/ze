// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: greet.proto

#include "greet.pb.h"
#include "greet.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {

static const char* Greeting_method_names[] = {
  "/proto.Greeting/GreetPing",
  "/proto.Greeting/AskName",
};

std::unique_ptr< Greeting::Stub> Greeting::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeting::Stub> stub(new Greeting::Stub(channel, options));
  return stub;
}

Greeting::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GreetPing_(Greeting_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AskName_(Greeting_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeting::Stub::GreetPing(::grpc::ClientContext* context, const ::proto::GreetRequest& request, ::proto::GreetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GreetRequest, ::proto::GreetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GreetPing_, context, request, response);
}

void Greeting::Stub::async::GreetPing(::grpc::ClientContext* context, const ::proto::GreetRequest* request, ::proto::GreetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GreetRequest, ::proto::GreetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GreetPing_, context, request, response, std::move(f));
}

void Greeting::Stub::async::GreetPing(::grpc::ClientContext* context, const ::proto::GreetRequest* request, ::proto::GreetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GreetPing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GreetResponse>* Greeting::Stub::PrepareAsyncGreetPingRaw(::grpc::ClientContext* context, const ::proto::GreetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GreetResponse, ::proto::GreetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GreetPing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GreetResponse>* Greeting::Stub::AsyncGreetPingRaw(::grpc::ClientContext* context, const ::proto::GreetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGreetPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeting::Stub::AskName(::grpc::ClientContext* context, const ::proto::AskNameRequest& request, ::proto::AskNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::AskNameRequest, ::proto::AskNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AskName_, context, request, response);
}

void Greeting::Stub::async::AskName(::grpc::ClientContext* context, const ::proto::AskNameRequest* request, ::proto::AskNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::AskNameRequest, ::proto::AskNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AskName_, context, request, response, std::move(f));
}

void Greeting::Stub::async::AskName(::grpc::ClientContext* context, const ::proto::AskNameRequest* request, ::proto::AskNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AskName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::AskNameResponse>* Greeting::Stub::PrepareAsyncAskNameRaw(::grpc::ClientContext* context, const ::proto::AskNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::AskNameResponse, ::proto::AskNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AskName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::AskNameResponse>* Greeting::Stub::AsyncAskNameRaw(::grpc::ClientContext* context, const ::proto::AskNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAskNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

Greeting::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeting_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeting::Service, ::proto::GreetRequest, ::proto::GreetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GreetRequest* req,
             ::proto::GreetResponse* resp) {
               return service->GreetPing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeting_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeting::Service, ::proto::AskNameRequest, ::proto::AskNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::AskNameRequest* req,
             ::proto::AskNameResponse* resp) {
               return service->AskName(ctx, req, resp);
             }, this)));
}

Greeting::Service::~Service() {
}

::grpc::Status Greeting::Service::GreetPing(::grpc::ServerContext* context, const ::proto::GreetRequest* request, ::proto::GreetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeting::Service::AskName(::grpc::ServerContext* context, const ::proto::AskNameRequest* request, ::proto::AskNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

